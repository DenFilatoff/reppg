Секцинирование таблицы 
1.Загружена демо-база psql -f /tmp/demo-medium-20170815.sql -U postgres
Получаем ddl таблицы flights 
pg_dump -t 'bookings.flights' --schema-only demo


CREATE TABLE bookings.flights (
    flight_id integer NOT NULL,
    flight_no character(6) NOT NULL,
    scheduled_departure timestamp with time zone NOT NULL,
    scheduled_arrival timestamp with time zone NOT NULL,
    departure_airport character(3) NOT NULL,
    arrival_airport character(3) NOT NULL,
    status character varying(20) NOT NULL,
    aircraft_code character(3) NOT NULL,
    actual_departure timestamp with time zone,
    actual_arrival timestamp with time zone,
    CONSTRAINT flights_check CHECK ((scheduled_arrival > scheduled_departure)),
    CONSTRAINT flights_check1 CHECK (((actual_arrival IS NULL) OR ((actual_departure IS NOT NULL) AND (actual_arrival IS NOT NULL) AND (actual_arrival > actual_departure)))),
    CONSTRAINT flights_status_check CHECK (((status)::text = ANY (ARRAY[('On Time'::character varying)::text, ('Delayed'::character varying)::text, ('Departed'::character varying)::text, ('Arrived'::character varying)::text, ('Scheduled'::character varying)::text, ('Cancelled'::character varying)::text])))
);

Секционирование проведем по полю  flight_no character(6) NOT NULL

Всего в таблице 
demo=# select count(*) from bookings.flights;
 count 
-------
 65664
(1 row)

Переименование таблицы
demo=# ALTER TABLE flights  RENAME TO flights_legacy;
ALTER TABLE

Создаем новую таблицу партицированную  по полю flight_no
demo=# CREATE TABLE bookings.flights (
    flight_id integer NOT NULL,
    flight_no character(6) NOT NULL,
    scheduled_departure timestamp with time zone NOT NULL,
    scheduled_arrival timestamp with time zone NOT NULL,
    departure_airport character(3) NOT NULL,
    arrival_airport character(3) NOT NULL,
    status character varying(20) NOT NULL,
    aircraft_code character(3) NOT NULL,
    actual_departure timestamp with time zone,
    actual_arrival timestamp with time zone,
    CONSTRAINT flights_check CHECK ((scheduled_arrival > scheduled_departure)),
    CONSTRAINT flights_check1 CHECK (((actual_arrival IS NULL) OR ((actual_departure IS NOT NULL) AND (actual_arrival IS NOT NULL) AND (actual_arrival > actual_departure)))),
    CONSTRAINT flights_status_check CHECK (((status)::text = ANY (ARRAY[('On Time'::character varying)::text, ('Delayed'::character varying)::text, ('Departed'::character varying)::text, ('Arrived'::character varying)::text, ('Scheduled'::character varying)::text, ('Cancelled'::character varying)::text])))
) PARTITION BY RANGE (flight_no);
CREATE TABLE

Создаем партиции 
demo=# CREATE TABLE flights_part1  partition of flights  FOR VALUES FROM   ('PG0000') to  ('PG0100');
CREATE TABLE flights_part2  partition of flights  FOR VALUES FROM   ('PG0100') to  ('PG0400');
CREATE TABLE flights_part3  partition of flights  FOR VALUES FROM   ('PG0400') to  ('PG0600');
CREATE TABLE flights_part4  partition of flights  FOR VALUES FROM   ('PG0600') to  ('PG0800');
CREATE TABLE
CREATE TABLE
CREATE TABLE
CREATE TABLE

                                                             ^
demo=# \d+ flights
                                                 Partitioned table "bookings.flights"
       Column        |           Type           | Collation | Nullable | Default | Storage  | Compression | Stats target | Description 
---------------------+--------------------------+-----------+----------+---------+----------+-------------+--------------+-------------
 flight_id           | integer                  |           | not null |         | plain    |             |              | 
 flight_no           | character(6)             |           | not null |         | extended |             |              | 
 scheduled_departure | timestamp with time zone |           | not null |         | plain    |             |              | 
 scheduled_arrival   | timestamp with time zone |           | not null |         | plain    |             |              | 
 departure_airport   | character(3)             |           | not null |         | extended |             |              | 
 arrival_airport     | character(3)             |           | not null |         | extended |             |              | 
 status              | character varying(20)    |           | not null |         | extended |             |              | 
 aircraft_code       | character(3)             |           | not null |         | extended |             |              | 
 actual_departure    | timestamp with time zone |           |          |         | plain    |             |              | 
 actual_arrival      | timestamp with time zone |           |          |         | plain    |             |              | 
Partition key: RANGE (flight_no)
Check constraints:
    "flights_check" CHECK (scheduled_arrival > scheduled_departure)
    "flights_check1" CHECK (actual_arrival IS NULL OR actual_departure IS NOT NULL AND actual_arrival IS NOT NULL AND actual_arrival > actual_departure)
    "flights_status_check" CHECK (status::text = ANY (ARRAY['On Time'::character varying::text, 'Delayed'::character varying::text, 'Departed'::character varying::text, 'Arrived'::character varying::text, 'Scheduled'::character varying::text, 'Cancelled'::character varying::text]))
Partitions: flights_part1 FOR VALUES FROM ('PG0000') TO ('PG0100'),
            flights_part2 FOR VALUES FROM ('PG0100') TO ('PG0400'),
            flights_part3 FOR VALUES FROM ('PG0400') TO ('PG0600'),
            flights_part4 FOR VALUES FROM ('PG0600') TO ('PG0800')

Для таблицы flight создаем функцию и триггер 
CREATE OR REPLACE FUNCTION flights_insert_trigger()
RETURNS TRIGGER AS $$
BEGIN
    IF ( NEW.flight_no  >= 'PG0000'  AND
         NEW.flight_no < 'PG0100' ) THEN
        INSERT INTO flights_part1 VALUES (NEW.*);
    ELSIF ( NEW.flight_no >= 'PG0100' AND
            NEW.flight_no < 'PG0400' ) THEN
        INSERT INTO flights_part2 VALUES (NEW.*);
    ELSIF ( NEW.flight_no >='PG0400' AND
            NEW.flight_no < 'PG0600' ) THEN
        INSERT INTO flights_part3 VALUES (NEW.*);
    ELSIF ( NEW.flight_no >= 'PG0600'  AND
            NEW.flight_no < 'PG0800'  ) THEN
        INSERT INTO flights_part4 VALUES (NEW.*);
    ELSE
        RAISE EXCEPTION
  'Date out of range.  Fix the measurement_insert_trigger() function!';
    END IF;
    RETURN NULL;
END;
$$
LANGUAGE plpgsql;


CREATE TRIGGER insert_flights    
    BEFORE INSERT ON flights
    FOR EACH ROW EXECUTE FUNCTION flights_insert_trigger();
    
  
 Переливаем данные из старой таблицы в новую партицированную. 
demo=# WITH rows AS (
DELETE FROM flights_legacy d
WHERE (flight_no >= 'PG0000' AND flight_no < 'PG0800')
RETURNING d.* )
INSERT INTO flights SELECT * FROM rows;
INSERT 0 65664


проверяем размеры партиций
demo=# select count (8) from flights_part1;
 count 
-------
  7742
(1 row)

demo=# select count (8) from flights_part2;
 count 
-------
 28618
(1 row)

demo=# select count (8) from flights_part3;
 count 
-------
 19089
(1 row)

demo=# select count (8) from flights_part4;
 count 
-------
 10215
(1 row)



Данные перелились из непартицированной в партицированную
